<?php 

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_node_access().
 * @param \Drupal\node\NodeInterface $node
 * @param unknown $op
 * @param \Drupal\Core\Session\AccountInterface $account
 * @return unknown
 */
function dyniva_content_access_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  if($op == 'view' && $node->hasField('access_control') && !empty($node->access_control)){
    foreach ($node->access_control as $item){
      $access_control = $item->value;
      if(!\Drupal::service('dyniva_content_access.filter_manager')->access($access_control, $node, $account)){
        return AccessResult::forbidden();
      }
    }
  }
  return AccessResult::neutral();
}
/**
 * Implements hook_entity_insert().
 */
function dyniva_content_access_entity_insert(EntityInterface $entity) {
  dyniva_content_access_entity_update($entity);
}
/**
 * Implements hook_entity_update().
 */
function dyniva_content_access_entity_update(EntityInterface $entity) {
  if (isset($entity->content_access_settings)) {
    dyniva_content_access_update_content_access_record($entity, $entity->content_access_settings);
  }
}
/**
 * Update content access record.
 *
 * @param EntityInterface $entity
 * @param array $settings
 */
function dyniva_content_access_update_content_access_record(EntityInterface $entity, array $settings){
  $storage = \Drupal::entityTypeManager()->getStorage('content_access_record');
  foreach ($entity->access_control as $item) {
    $type = $item->value;
    if(isset($settings[$type])){
      
      $query = \Drupal::database()->select('content_access_record','t');
      $query->condition('entity_type',$entity->getEntityTypeId());
      $query->condition('entity_id',$entity->id());
      $query->condition('record_type',$type);
      $query->addField('t', 'record_id');
      $records = $query->execute()->fetchCol();
      
      $values = array_keys($settings[$type]);
      $reduce = array_diff($records, $values);
      $add = array_diff($values, $records);
      
      if(!empty($reduce)) {
        $query = \Drupal::database()->delete('content_access_record');
        $query->condition('entity_type',$entity->getEntityTypeId());
        $query->condition('entity_id',$entity->id());
        $query->condition('record_type',$type);
        $query->condition('record_id',$reduce, 'IN');
        $query->execute();
      }
      
      foreach ($add  as $rid ) {
        $values = [
          'entity_type' => $entity->getEntityTypeId(),
          'entity_id' => $entity->id(),
          'record_type' => $type,
          'record_id' => $rid,
        ];
        $record = $storage->create($values);
        $record->save();
      }
    }
  }
}
/*
function dyniva_content_access_taxonomy_term_access(\Drupal\taxonomy\Entity\Term $term, $op, \Drupal\Core\Session\AccountInterface $account) {
  if($op == 'view' && $term->hasField('access_control') && !empty($term->access_control)){
    foreach ($term->access_control as $item){
      $access_control = $item->value;
      if(!\Drupal::service('dyniva_content_access.filter_manager')->access($access_control, $term)){
        return AccessResult::forbidden();
      }
    }
  }
  return AccessResult::neutral();
}
function dyniva_content_access_entity_presave(EntityInterface $entity){
  if($entity instanceof Drupal\Core\Entity\FieldableEntityInterface && $entity->hasField('access_control')){
    $flag =  false;
    foreach ($entity->access_control as $item){
      if($item->value != 'public'){
        $flag = true;
        break;
      }
    }
    if($flag){
      if(!empty($entity->path->alias) && strpos($entity->path->alias, '/app') !== 0){
        $entity->path->alias = '/app' . $entity->path->alias;
        $entity->path->pathauto = 0;
      }
    }else{
      if(!empty($entity->path->alias) && strpos($entity->path->alias, '/app') === 0){
        $entity->path->alias = substr($entity->path->alias,4);
        $entity->path->pathauto = 0;
      }
    }
  }
}
function dyniva_content_access_pathauto_alias_alter(&$alias, array &$context) {
  if($context['op'] == 'insert'){
    $entity =  reset($context['data']);
    if($entity){
      if($entity instanceof Drupal\Core\Entity\FieldableEntityInterface && $entity->hasField('access_control')){
        $flag =  false;
        foreach ($entity->access_control as $item){
          if($item->value != 'public'){
            $flag = true;
            break;
          }
        }
        if($flag){
          if(!empty($alias) && strpos($alias, '/app') !== 0){
            $alias = '/app' . $alias;
          }
        }
      }
    }
  }
}
*/
  